- Access to situation room DB
psql -h situation-room.yellowbrick.io -d situation_room_production -U win
Username`win`
PW: `X0pcAcIuH$8t`
    
    - how to get results or the automated run against build
    
- Access to the git log
    - how to identify different builds? 
    
    - what info is needed for parsing?
        -> author ?

- Acess to codefresh
    -> to setup cron job

Output: 
 - Send emails and slack 
    -> results of the automated run against build X


Questions: 
1. Only run against master? 
2. What will trigger this script? 
    - Triggered by commit? or merge or build? 

3. Can you describe the input/output of this script? 

4. What does approved changes to master mean? 

5. What if there are more than 1000 failures, how shall i deal with it.  


Workflow 

Triggers Script ?? -> Build X -> parse git log for commit,commiters,message ->execution complete -> build number -> lookup test results from situation room based on build numbmer

2 parts: 

Part 1 (Before execution): 

-> Takes in the Build number 
-> Gather info from git log based on Build number 
    - commit 
    - commiters 
    - message etc 

Part 2 (Execution Completes)

-> Takes in the Build number 
-> Look up for failed test results via situation room based on Build number
 -> useful tables:
    - `build_notes` 
            * ybd_build_id 
            * user_id 
            * body 
            * created_at 
            * updated_at
    
    - `invocations`
            * ytest_version 
            * started_at
            * ended_at
            * created_at
            * updated_at
            * ybd_build_id
            * import_id
            * machine_configuration_id
            * invocation_identity_id 
    
    - `invocation_notes` 
            * user_id 
            * invocation_id 
            * created_at 
            * updated_at
    
    - `suites`
            * suite_identity_id 
            * created_at
            * updated_at
            * passed_test_runs_count
            * failed_test_runs_count
            * skipped_test_runs_count
            * successful_test_runs_count
            * invocation_id 
            * started_at
            * ended_at
    
    - `suite_identities`  
        * name
        * created_at 
        * updated_at

    - `test_cases`
        * started_at
        * test_case_identity_id
        * suite_id 
        * created_at
        * updated_at
        * status_reason (null)
        * status_detail (null)
        * status 
        * expected_status
        * ended_at 
        * duration_ms

        what is status for pass and fail 

    - `test_case_identities` 
       * name 
       * created_at
       * updated_at 
       * suite_identity_id
    
    - `users`
        * email 
        * first_name
        * last_name 
        * full_name 
        * username 
        * created_at 
        * updated_at
    
    - `ybd_builds`
        * git_sha 
        * git_branch 
        * version
        * build_number 
        * created_at  
        * updated_at


   

Output
-> Commiters + List of failed test results 

Schema notes
